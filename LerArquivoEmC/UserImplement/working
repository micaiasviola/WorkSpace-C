#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_NOME 100
#define MAX_SENHA 100
#define MAX_ACESSO 20
#define MAX_LINHA 256

typedef struct {
    char nome[MAX_NOME];
    char senha[MAX_SENHA];
    char acesso[MAX_ACESSO];
} Usuario;

int usuarioExiste(const char *nomeUsuario) {
    FILE *arquivo = fopen("usuarios.txt", "r");
    char linha[MAX_LINHA];
    int encontrado = 0;

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return -1; // Erro ao abrir o arquivo
    }

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        char nome[MAX_NOME];
        sscanf(linha, "%[^|]|", nome); // Lê o nome do usuário

        if (strcmp(nome, nomeUsuario) == 0) {
            encontrado = 1;
            break;
        }
    }

    fclose(arquivo);
    return encontrado;
}

void cadastrarUsuario(Usuario *usuario) {
    if (usuarioExiste(usuario.nome)) {
        printf("O usuário '%s' já existe.\n", usuario.nome);
        return;
    }

    FILE *arquivo = fopen("usuarios.txt", "a");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para escrita.\n");
        return;
    }

    fprintf(arquivo, "%s|%s|%s\n", usuario.nome, usuario.senha, usuario.acesso);
    fclose(arquivo);
    printf("Usuário '%s' cadastrado com sucesso.\n", usuario.nome);
}

int verificarLogin(const char *nomeUsuario, const char *senha) {
    FILE *arquivo = fopen("usuarios.txt", "r");
    char linha[MAX_LINHA];
    int loginValido = 0;

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return -1; // Erro ao abrir o arquivo
    }

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        char nome[MAX_NOME], senhaArquivo[MAX_SENHA];
        sscanf(linha, "%[^|]|%[^|]|", nome, senhaArquivo);

        if (strcmp(nome, nomeUsuario) == 0 && strcmp(senhaArquivo, senha) == 0) {
            loginValido = 1;
            break;
        }
    }

    fclose(arquivo);
    return loginValido;
}

int main() {
    Usuario novoUsuario;
    char nomeUsuario[MAX_NOME];
    char senha[MAX_SENHA];
    int opcao;

    printf("1. Cadastrar Usuário\n");
    printf("2. Login\n");
    printf("Escolha uma opção: ");
    scanf("%d", &opcao);
    getchar(); // Limpa o caractere de nova linha

    if (opcao == 1) {
        printf("Digite o nome do usuário: ");
        fgets(novoUsuario.nome, MAX_NOME, stdin);
        novoUsuario.nome[strcspn(novoUsuario.nome, "\n")] = '\0';

        printf("Digite a senha: ");
        fgets(novoUsuario.senha, MAX_SENHA, stdin);
        novoUsuario.senha[strcspn(novoUsuario.senha, "\n")] = '\0';

        printf("Digite o nível de acesso (caixa, gerente, administrador): ");
        fgets(novoUsuario.acesso, MAX_ACESSO, stdin);
        novoUsuario.acesso[strcspn(novoUsuario.acesso, "\n")] = '\0';

        cadastrarUsuario(&novoUsuario);
    } else if (opcao == 2) {
        printf("Digite o nome do usuário: ");
        fgets(nomeUsuario, MAX_NOME, stdin);
        nomeUsuario[strcspn(nomeUsuario, "\n")] = '\0';

        printf("Digite a senha: ");
        fgets(senha, MAX_SENHA, stdin);
        senha[strcspn(senha, "\n")] = '\0';

        if (verificarLogin(nomeUsuario, senha)) {
            printf("Login bem-sucedido!\n");
        } else {
            printf("Nome de usuário ou senha incorretos.\n");
        }
    } else {
        printf("Opção inválida.\n");
    }

    return 0;
}
